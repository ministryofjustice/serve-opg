version: '3.8'
services:
  aws:
    image: infrastructureascode/aws-cli
    environment:
      - AWS_ACCESS_KEY_ID=foo
      - AWS_SECRET_ACCESS_KEY=bar
    entrypoint:
      - aws
    working_dir: /var/www
    volumes:
      - ./serve-web:/var/www
    depends_on:
      - localstack

  loadbalancer:
    image: jwilder/nginx-proxy:0.10.1-alpine
    ports:
      - 443:443
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./serve-web/certs:/etc/nginx/certs
      - ./serve-web/docker/loadbalancer/my_proxy.conf:/etc/nginx/conf.d/my_proxy.conf:ro
    depends_on:
      - web
    environment:
      DHPARAM_GENERATION: "false"
      DEFAULT_HOST: localhost
      CERT_NAME: web.crt

  web:
    build:
      context: ./serve-web
      dockerfile: docker/web/Dockerfile
      args:
        APP_HOST_ARG: ${APP_HOST_LOCAL_ENV:-app}
        APP_PORT_ARG: ${APP_PORT_LOCAL_ENV:-9000}
    image: 311462405659.dkr.ecr.eu-west-1.amazonaws.com/serve-opg/web:latest
    depends_on:
      - app
    environment:
      VIRTUAL_HOST: web
    volumes:
      - ./serve-web/public:/var/www/public

  app:
    build:
      context: ./serve-web
      dockerfile: docker/app/Dockerfile
    image: 311462405659.dkr.ecr.eu-west-1.amazonaws.com/serve-opg/app:latest
    ports:
      - 9000:9000
    env_file:
      - ./serve-web/.env
    # Setting here rather than .env to stop them being overwritten during build steps on prod
    environment:
      - APP_SECRET=aFakeSecret
      - AWS_ACCESS_KEY_ID=foo
      - AWS_SECRET_ACCESS_KEY=bar
      - BEHAT_PASSWORD=Abcd1234
      - DC_S3_ENDPOINT=http://localstack:4566
      - DYNAMODB_ENDPOINT=http://localstack:4566
      - FIXTURES_ENABLED=true
      - OS_PLACES_API_KEY=DUMMY_KEY
      - SIRIUS_PUBLIC_API_PASSWORD=FAKE_API_PASSWORD
      - ENVIRONMENT_NAME=local
    depends_on:
      postgres:
        condition: service_healthy
      localstack:
        condition: service_healthy
      sirius-api:
        condition: service_started

  # TODO - Work out why upgrades to prism break behat
  sirius-api:
    image: stoplight/prism:4.4.1
    ports:
      - 4010:4010
    volumes:
      - ./serve-web:/tmp
    command:
      - mock
      - /tmp/api.public.v1.yaml
      - -h
      - 0.0.0.0
      - --dynamic

  localstack:
    build:
      context: .
      dockerfile: local-setup/localstack/Dockerfile
    ports:
      - "4566-4583:4566-4583"
    environment:
      - SERVICES=s3,dynamodb,kms,secretsmanager
      - DATA_DIR=/tmp/localstack/data
      - DEFAULT_REGION=eu-west-1
      - S3_SKIP_KMS_KEY_VALIDATION=1
      - KMS_PROVIDER=local-kms
      - LAMBDA_REMOTE_DOCKER=0
      - DEBUG=1
    healthcheck:
      test: [ "CMD", "bash", "-c", "/tmp/healthcheck.sh" ]
      interval: 5s
      timeout: 10s
      start_period: 10s

  postgres:
    image: postgres:13.20
    ports:
      - 5432:5432
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: serve-opg
      POSTGRES_USER: serve-opg
      POSTGRES_PASSWORD: dcdb2018!
      POSTGRES_API_DB_USER: serve-opg-api
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d serve-opg -U serve-opg" ]
      interval: 3s
      timeout: 10s
    restart: always

  yarn:
    image: node:20-alpine
    environment:
      PATH: /node_modules/.bin:$PATH
    working_dir: /var/www
    volumes:
      - ./serve-web/node_modules:/var/www/node_modules
      - ./serve-web:/var/www
    entrypoint: [ "yarn" ]

  behat:
    build:
      context: ./serve-web
      dockerfile: docker/app/Dockerfile
    image: 311462405659.dkr.ecr.eu-west-1.amazonaws.com/serve-opg/app:latest
    volumes:
      - ./serve-web:/var/www
    working_dir: /var/www
    entrypoint:
      - vendor/bin/behat
      - -c
      - behat.yml.dist
      - --suite=local
      - --stop-on-failure
      - --no-interaction
    env_file:
      - ./serve-web/.env
    environment:
      APP_ENV: 'test'
      BEHAT_PARAMS: '{"extensions" : {"Behat\\MinkExtension" : {"base_url" : "https://loadbalancer"}}}'
      BEHAT_PASSWORD: 'Abcd1234'

  qa:
    image: jakzal/phpqa:alpine
    volumes:
      - ./serve-web:/var/www:ro
    working_dir: /var/www
