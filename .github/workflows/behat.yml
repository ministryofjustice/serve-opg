on:
  workflow_call:
    inputs:
      workspace_name:
        description: "The terraform workspace to target"
        required: true
        type: string
      version_tag:
        description: "Version tag for docker images"
        required: true
        type: string
      base_url:
        description: "Base url to run Behat against"
        required: true
        type: string
      sirius_api_bucket:
        description: "Sirius API bucket to use"
        required: true
        type: string
      suite:
        description: "Test suite to run"
        required: true
        type: string

jobs:
  run_behat_tests:
    runs-on: ubuntu-latest
    env:
      TF_WORKSPACE: ${{ inputs.workspace_name }}
      APP_VERSION: ${{ inputs.version_tag }}
      WEB_VERSION: ${{ inputs.version_tag }}
      INFRA_VERSION: ${{ inputs.version_tag }}
    steps:
      - uses: actions/checkout@v3
      - uses: unfor19/install-aws-cli-action@v1.0.6
      - name: Install PHP 8.0
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.0.22"
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10.9"
      - name: Install Python packages
        run: |
          pip3 install -r scripts/ci_ingress/requirements.txt

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
        working-directory: ./serve-web
      - name: Cache PHP Dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      - name: Composer Install
        run: |
          composer install --no-interaction
        working-directory: ./serve-web

      - name: Create Failure Folder
        run: |
          mkdir -p /tmp/behat

      - name: Retrieve Cluster Config File
        uses: actions/download-artifact@v3
        with:
          name: cluster_config

      - name: Configure AWS Credentials for Behat Password
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::705467933182:role/serve-opg-ci
          role-duration-seconds: 3600
          role-session-name: BehatPasswordActions

      - name: Get Behat password
        run: |
          BEHAT_PASSWORD=$(aws secretsmanager get-secret-value \
          --secret-id behat_password \
          --region eu-west-1 | jq -r '.SecretString' 2>/dev/null)
          echo "::add-mask::$BEHAT_PASSWORD"
          echo BEHAT_PASSWORD=$BEHAT_PASSWORD >> $GITHUB_ENV

      - name: Unset AWS Credentials
        run: |
          echo "AWS_ACCESS_KEY_ID=" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=" >> $GITHUB_ENV
          echo "AWS_REGION=" >> $GITHUB_ENV

      - name: Allow CI ingress
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          echo $TF_WORKSPACE
          python scripts/ci_ingress/ci_ingress.py cluster_config.json --add

      - name: Run Behat
        env:
          BEHAT_PARAMS: '{"extensions" : {"Behat\\MinkExtension" : {"base_url" : "https://${{ inputs.base_url }}"}}}'
          SIRIUS_S3_BUCKET_NAME: ${{ inputs.sirius_api_bucket }}
        run: |
          vendor/bin/behat --stop-on-failure -c behat.yml.dist ${{ inputs.suite }}
        working-directory: ./serve-web

      - name: Archive Test Output
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: Behat Outputs
          path: /tmp/behat

      - name: Remove CI ingress
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          echo $TF_WORKSPACE
          python scripts/ci_ingress/ci_ingress.py cluster_config.json
