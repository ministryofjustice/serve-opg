on:
  workflow_call:
    inputs:
      workspace_name:
        description: "The terraform workspace to target"
        required: true
        type: string
      version_tag:
        description: "Version tag for docker images"
        required: true
        type: string
      base_url:
        description: "Base url to run Behat against"
        required: true
        type: string
      sirius_api_bucket:
        description: "Sirius API bucket to use"
        required: true
        type: string
      suite:
        description: "Test suite to run"
        required: true
        type: string
      account_name:
        description: "Account Name"
        required: true
        type: string
      account_id:
        description: "Account ID"
        required: true
        type: string

jobs:
  run_behat_tests:
    runs-on: ubuntu-latest
    env:
      TF_WORKSPACE: ${{ inputs.workspace_name }}
      APP_VERSION: ${{ inputs.version_tag }}
    steps:
      - uses: actions/checkout@b32f140b0c872d58512e0a66172253c302617b90

      - uses: unfor19/install-aws-cli-action@46282f151073130d90347412d9c4ef0640177f22

      - name: Install PHP 8.1
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1.18"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10.9"

      - name: Install Python packages
        run: |
          pip3 install -r scripts/ci_ingress/requirements.txt

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
        working-directory: ./serve-web

      - name: Cache PHP Dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Composer Install
        run: |
          composer install --no-interaction
        working-directory: ./serve-web

      - name: Create Failure Folder
        run: |
          mkdir -p /tmp/behat

      - name: Retrieve Cluster Config File
        uses: actions/download-artifact@v3
        with:
          name: cluster_config

      - name: Configure OIDC AWS Credentials to get password
        uses: aws-actions/configure-aws-credentials@b140ab7b246475139f89894ebae4ba00bd5b374e
        with:
          aws-region: eu-west-1
          role-to-assume: "arn:aws:iam::631181914621:role/oidc-serve-${{ inputs.account_name }}"
          role-duration-seconds: 900
          role-session-name: identity-oidc-serve

      - name: Get Behat password
        env:
          ACCOUNT_NAME: ${{ inputs.account_name }}
        run: |
          aws sts assume-role \
          --role-arn "arn:aws:iam::${ACCOUNT_ID}:role/serve-opg-ci" \
          --role-session-name "serve-get-behat-pw"

          BEHAT_PASSWORD=$(aws secretsmanager get-secret-value \
          --secret-id behat_password \
          --profile serve-ci-${ACCOUNT_NAME}
          --region eu-west-1 | jq -r '.SecretString' 2>/dev/null)

          echo "::add-mask::$BEHAT_PASSWORD"
          echo BEHAT_PASSWORD=$BEHAT_PASSWORD >> $GITHUB_ENV

      - name: Allow CI ingress
        run: |
          echo $TF_WORKSPACE
          python scripts/ci_ingress/ci_ingress.py cluster_config.json --add

      - name: Run Behat
        env:
          BEHAT_PARAMS: '{"extensions" : {"Behat\\MinkExtension" : {"base_url" : "https://${{ inputs.base_url }}"}}}'
          SIRIUS_S3_BUCKET_NAME: ${{ inputs.sirius_api_bucket }}
        run: |
          vendor/bin/behat --stop-on-failure -c behat.yml.dist ${{ inputs.suite }}
        working-directory: ./serve-web

      - name: Archive Test Output
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: Behat Outputs
          path: /tmp/behat

      - name: Remove CI ingress
        run: |
          echo $TF_WORKSPACE
          python scripts/ci_ingress/ci_ingress.py cluster_config.json
