on:
  workflow_call:
    inputs:
      terraform_path:
        description: "The name of the terraform path"
        required: true
        type: string
      workspace:
        description: "Terraform workspace"
        required: true
        type: string
      account_name:
        description: "Account name"
        required: true
        type: string
      container_version:
        description: "Image tag to use"
        required: false
        type: string
        default: ""
      apply:
        description: "Whether to apply terraform"
        required: false
        type: boolean
        default: false
      path_to_live:
        description: "If we are on path to live"
        required: false
        type: boolean
        default: false
jobs:
  terraform_workflow_job:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: '0'

      - uses: unfor19/install-aws-cli-action@e8b481e524a99f37fbd39fdc1dcb3341ab091367 # v1

      - id: terraform_version
        name: get terraform version
        uses: ministryofjustice/opg-github-actions/.github/actions/terraform-version@464975f6f9e628ffcece3db87ecb819d8d391ab6 # v3.1.6
        with:
          terraform_directory: terraform/${{ inputs.terraform_path }}

      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_version: ${{ steps.terraform_version.outputs.version }}
          terraform_wrapper: false

      - name: Configure Terraform OIDC AWS Credentials
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4.2.1
        with:
          aws-region: eu-west-1
          role-to-assume: "arn:aws:iam::631181914621:role/oidc-serve-${{ inputs.account_name }}"
          role-duration-seconds: 3600
          role-session-name: terraform-oidc-serve

      - uses: webfactory/ssh-agent@a6f90b1f127823b31d4d4a8d96047790581349bd # v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_ALLOW_LIST_REPOSITORY }}

      - uses: terraform-linters/setup-tflint@90f302c255ef959cbfb4bd10581afecdb7ece3e6 # v4.1.1
        name: Setup TFLint
        with:
          tflint_version: v0.50.1

      - name: Lint Terraform
        id: tf_lint
        run: tflint --recursive
        working-directory: terraform/${{ inputs.terraform_path }}

      - name: Check formatting
        id: tf_fmt
        run: terraform fmt -check -recursive
        working-directory: terraform/${{ inputs.terraform_path }}

      - name: Terraform Init
        run: |
          terraform --version
          terraform init -input=false
        working-directory: terraform/${{ inputs.terraform_path }}

      - name: Terraform Plan
        env:
          TF_WORKSPACE: ${{ inputs.workspace }}
          TF_VAR_APP_VERSION: ${{ inputs.container_version }}
        run: |
          terraform workspace show
          terraform plan -input=false -parallelism=30
        working-directory: terraform/${{ inputs.terraform_path }}

      - name: Register Workspace
        id: terraform_workspace_manager
        if: inputs.apply == true && inputs.terraform_path == 'environment' && inputs.path_to_live == false
        uses: ministryofjustice/opg-github-actions/.github/actions/terraform-workspace-manager@464975f6f9e628ffcece3db87ecb819d8d391ab6 # v3.1.6
        with:
          aws_account_id: 705467933182
          aws_iam_role: serve-opg-ci
          register_workspace: ${{ inputs.workspace }}
          time_to_protect: 3
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        if: inputs.apply == true
        env:
          TF_WORKSPACE: ${{ inputs.workspace }}
          TF_VAR_APP_VERSION: ${{ inputs.container_version }}
        run: |
          terraform apply -lock-timeout=300s -input=false -auto-approve -parallelism=30
        working-directory: terraform/${{ inputs.terraform_path }}

      - name: Upload Config
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: cluster_config_${{ inputs.workspace }}
          path: ./terraform/environment/cluster_config.json

      - name: Get Terraform Outputs for ECS Task
        if: inputs.apply == true && inputs.terraform_path == 'environment'
        id: tf_outputs
        run: |
          subnets=$(terraform output -json private_subnet_ids | jq -r '.[]' | paste -sd "," -)
          sg=$(terraform output -raw ecs_db_access_sg_id)
          echo "subnets=$subnets" >> $GITHUB_OUTPUT
          echo "sg=$sg" >> $GITHUB_OUTPUT
        working-directory: terraform/${{ inputs.terraform_path }}
        
      - name: Run create-readonly-user ECS task
        if: inputs.apply == true && inputs.terraform_path == 'environment'
        run: aws ecs run-task --cluster serve-opg-${{ inputs.workspace }} --launch-type FARGATE --task-definition create-readonly-user-${{ inputs.workspace }} --network-configuration "awsvpcConfiguration={subnets=[${{ steps.tf_outputs.outputs.subnets }}],securityGroups=[${{ steps.tf_outputs.outputs.sg }}],assignPublicIp=DISABLED}"

